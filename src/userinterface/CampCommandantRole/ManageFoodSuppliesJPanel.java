/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CampCommandantRole;

import userinterface.DoctorRole.DoctorWorkAreaJPanel;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Notifications.Send;
import Business.Organizations.FoodSupplierOrganization;
import Business.Organizations.MilitaryCampOrganization;
import Business.Organizations.Organization;
import Business.UserAccount.UserAccountSoldier.UserAccountSoldier;
import Business.RequestQueue.NewRequestToCampCommandant;
import Business.RequestQueue.NewRequestToFoodSupplier;
import Business.Soldiers.Soldiers;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;


/**
 *
 * @author raunak
 */
public class ManageFoodSuppliesJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccountSoldier userAccount;
    private EcoSystem system;
    private Enterprise enterprise;
    private static int pdfCount = 0;
    private Send send = new Send();
    private MilitaryCampOrganization organization;
    private static int count = 0;

    /**
     * Creates new form RequestLabTestJPanel
     */
    public ManageFoodSuppliesJPanel(JPanel userProcessContainer, UserAccountSoldier account, Enterprise enterprise, EcoSystem business, MilitaryCampOrganization organization) {
        try {
            initComponents();

            this.userProcessContainer = userProcessContainer;
            this.system = business;
            this.organization = organization;

            for (Network network : system.getNetworkList()) {
                //Step 2.a: check against each enterprise
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getEnterpriseType().toString().equals(Enterprise.EnterpriseType.FoodSuppliers.getValue())) {
                        this.enterprise = e;
                        break;
                    }
                }

                this.userAccount = account;
                valueLabel.setText(enterprise.getName());
                count = 0;
                populateFoodItemsComboBox();
                populateNewFoodItemComboBox();
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g)
            {
                ImageIcon img=new ImageIcon("camp.jpg");
                Image i=img.getImage();

                g.drawImage(i, 0, 0, this.getSize().width, this.getSize().height,this);
            }

        };
        jPanel2 = new javax.swing.JPanel();
        searchJButton = new javax.swing.JButton();
        newFoodItemComboBox = new javax.swing.JComboBox<String>();
        jLabel4 = new javax.swing.JLabel();
        createNewFoodItemButton = new javax.swing.JButton();
        newFoodItemButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        quantityAvailableTextField = new javax.swing.JTextField();
        foodItemsComboBox = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        deleteItemButton = new javax.swing.JButton();
        saveQAButton = new javax.swing.JButton();
        updateQAButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255,150));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchJButton.setText("Search Food In Food Suppliers");
        searchJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(searchJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 300, -1, -1));

        newFoodItemComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(newFoodItemComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 230, 290, -1));

        jLabel4.setText("Name");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, 70, -1));

        createNewFoodItemButton.setText("Create");
        createNewFoodItemButton.setEnabled(false);
        createNewFoodItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewFoodItemButtonActionPerformed(evt);
            }
        });
        jPanel2.add(createNewFoodItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 230, -1, -1));

        newFoodItemButton.setText("New Food Item");
        newFoodItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFoodItemButtonActionPerformed(evt);
            }
        });
        jPanel2.add(newFoodItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, -1, -1));

        jLabel1.setText("Quantity Available");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, -1, -1));

        quantityAvailableTextField.setEnabled(false);
        jPanel2.add(quantityAvailableTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 150, 290, -1));

        foodItemsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        foodItemsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodItemsComboBoxActionPerformed(evt);
            }
        });
        jPanel2.add(foodItemsComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 290, -1));

        jLabel2.setText("Food Items");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, -1));

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 10, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Request a Food Supplier");
        jPanel2.add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 330, 30));

        valueLabel.setText("<value>");
        jPanel2.add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, 130, -1));

        deleteItemButton.setText("Delete This Item");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });
        jPanel2.add(deleteItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, -1, -1));

        saveQAButton.setText("Save");
        saveQAButton.setEnabled(false);
        saveQAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveQAButtonActionPerformed(evt);
            }
        });
        jPanel2.add(saveQAButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 150, -1, -1));

        updateQAButton.setText("Update");
        updateQAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateQAButtonActionPerformed(evt);
            }
        });
        jPanel2.add(updateQAButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 150, -1, -1));
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 880, 20));
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 880, 20));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 910, 370));

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public void populateFoodItemsComboBox() {
        foodItemsComboBox.removeAllItems();
        count++;
        Iterator it = organization.getFoodSuppliesInMilitaryCamp().getFoodInventory().entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            foodItemsComboBox.addItem(pair.getKey().toString());
        }

    }

    public void populateNewFoodItemComboBox() {
        newFoodItemComboBox.setEnabled(false);
        newFoodItemComboBox.removeAllItems();
        for (Network network : system.getNetworkList()) {
            for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {
                    if (org instanceof FoodSupplierOrganization) {
                        FoodSupplierOrganization fsOrg = (FoodSupplierOrganization) org;
                        Iterator it = fsOrg.getFoodSuppliesInventory().getFoodInventory().entrySet().iterator();
                        while (it.hasNext()) {
                            Map.Entry pair = (Map.Entry) it.next();
                            newFoodItemComboBox.addItem(pair.getKey().toString());
                        }
                    }
                }
            }
        }
    }


    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        try {
            userProcessContainer.remove(this);
            Component[] componentArray = userProcessContainer.getComponents();
            Component component = componentArray[componentArray.length - 1];
            CampCommandantWorkAreaJPanel ccqjp = (CampCommandantWorkAreaJPanel) component;
            ccqjp.populateFoodRequestTable();
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.previous(userProcessContainer);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_backJButtonActionPerformed

    private void searchJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJButtonActionPerformed
        try {
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("RequestAFoodSupplierJPanel", new RequestAFoodSupplierJPanel(userProcessContainer, userAccount, enterprise, system, organization, foodItemsComboBox.getSelectedItem().toString()));
            layout.next(userProcessContainer);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_searchJButtonActionPerformed

    private void foodItemsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodItemsComboBoxActionPerformed
        try {
            Iterator it = organization.getFoodSuppliesInMilitaryCamp().getFoodInventory().entrySet().iterator();
            while (it.hasNext() && count > 0) {
                Map.Entry pair = (Map.Entry) it.next();
                if (pair.getKey().equals(foodItemsComboBox.getSelectedItem().toString())) {
                    quantityAvailableTextField.setText(pair.getValue().toString());
                    break;
                }
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_foodItemsComboBoxActionPerformed

    private void updateQAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateQAButtonActionPerformed
        try{
            quantityAvailableTextField.setEnabled(true);
        saveQAButton.setEnabled(true);
        updateQAButton.setEnabled(false);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_updateQAButtonActionPerformed

    private void saveQAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveQAButtonActionPerformed
        try {
            quantityAvailableTextField.setEnabled(false);

            saveQAButton.setEnabled(false);
            updateQAButton.setEnabled(true);
            Iterator it = organization.getFoodSuppliesInMilitaryCamp().getFoodInventory().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry) it.next();
                if (pair.getKey().equals(foodItemsComboBox.getSelectedItem().toString())) {
                    pair.setValue(Integer.parseInt(quantityAvailableTextField.getText()));
                    break;
                }
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_saveQAButtonActionPerformed

    private void newFoodItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFoodItemButtonActionPerformed
        try {
            createNewFoodItemButton.setEnabled(true);

            newFoodItemComboBox.setEnabled(true);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_newFoodItemButtonActionPerformed

    private void createNewFoodItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewFoodItemButtonActionPerformed
        try {
            createNewFoodItemButton.setEnabled(false);
            newFoodItemComboBox.setEnabled(false);
            Boolean flag = false;
            Iterator it = organization.getFoodSuppliesInMilitaryCamp().getFoodInventory().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry) it.next();
                if (pair.getKey().equals(newFoodItemComboBox.getSelectedItem().toString())) {
                    JOptionPane.showMessageDialog(null, "Item Already Exists!");
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                organization.getFoodSuppliesInMilitaryCamp().addToFoodInventory(newFoodItemComboBox.getSelectedItem().toString(), 0);
                JOptionPane.showMessageDialog(null, "Item Added Successfully!");
            }
            count = 0;
            populateFoodItemsComboBox();
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_createNewFoodItemButtonActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        try {
            Iterator it = organization.getFoodSuppliesInMilitaryCamp().getFoodInventory().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry) it.next();
                if (pair.getKey().equals(foodItemsComboBox.getSelectedItem().toString())) {
                    it.remove();
                    break;
                }
            }
            count = 0;
            populateFoodItemsComboBox();
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton createNewFoodItemButton;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JComboBox<String> foodItemsComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton newFoodItemButton;
    private javax.swing.JComboBox<String> newFoodItemComboBox;
    private javax.swing.JTextField quantityAvailableTextField;
    private javax.swing.JButton saveQAButton;
    private javax.swing.JButton searchJButton;
    private javax.swing.JButton updateQAButton;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
