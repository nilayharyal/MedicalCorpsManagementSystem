/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FoodSupplierRole;

import Business.EcoSystem;
import Business.Network.Network;
import Business.Organizations.FoodSupplierOrganization;
import Business.Organizations.Organization;
import Business.UserAccount.UserAccountFoodSupplier.UserAccountFoodSupplier;
import Business.RequestQueue.NewRequestToFoodSupplier;
import Business.RequestQueue.WorkRequestCampCommandantFoodSupplier;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;


/**
 *
 * @author raunak
 */
public class FoodSupplierWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccountFoodSupplier userAccount;
    private FoodSupplierOrganization foodSupplierOrganization;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public FoodSupplierWorkAreaJPanel(JPanel userProcessContainer, UserAccountFoodSupplier account, Organization organization, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.foodSupplierOrganization = (FoodSupplierOrganization) organization;
        //this.newRequestToMedicalSupplier = (MedicalSupplierOrganization)organization;

        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequestCampCommandantFoodSupplier request : foodSupplierOrganization.getRequestQueueCampCommandantFoodSupplier().getWorkRequestCampCommandantFoodSupplier()) {
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getSoldier().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getFoodSupplierEmployee().getName();
            row[3] = request.getStatus();

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g)
            {
                ImageIcon img=new ImageIcon("food.jpg");
                Image i=img.getImage();

                g.drawImage(i, 0, 0, this.getSize().width, this.getSize().height,this);
            }

        }
        ;
        jPanel2 = new javax.swing.JPanel();
        processJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        addNewFoodItemButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255,150));
        jPanel2.setForeground(new java.awt.Color(255, 102, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 240, -1, -1));

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 375, 96));

        addNewFoodItemButton.setText("Manage Food Items");
        addNewFoodItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewFoodItemButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addNewFoodItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, -1, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, -1, -1));
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 500, 20));
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 500, 10));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 200, 550, 310));

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        WorkRequestCampCommandantFoodSupplier request = (WorkRequestCampCommandantFoodSupplier) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getStatus() == "Approved" || request.getStatus() == "Rejected") {
            JOptionPane.showMessageDialog(null, "request already processed");
        } else {
            if (request.getStatus() == "Pending") {
                JOptionPane.showMessageDialog(null, "request already in process");
            } else {
                request.setReceiver(userAccount);
                request.setStatus("Pending");
                populateTable();
            }
        }

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "request already processed");
        }

        NewRequestToFoodSupplier request = (NewRequestToFoodSupplier) workRequestJTable.getValueAt(selectedRow, 0);
        if ("Approved".equals(request.getStatus()) || "Rejected".equals(request.getStatus())) {
            JOptionPane.showMessageDialog(null, "request already processed");
        }
        {
            if (!"Pending".equals(request.getStatus()) || !userAccount.getUsername().equals(request.getReceiver().getUsername())) {
                JOptionPane.showMessageDialog(null, " Request is not assigned to you");
            } else {
                request.setStatus("Processing");

                ProcessWorkRequestCampCommandantFoodSupplierJPanel processWorkRequestJPanel = new ProcessWorkRequestCampCommandantFoodSupplierJPanel(userProcessContainer, request, foodSupplierOrganization, business);
                userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void addNewFoodItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewFoodItemButtonActionPerformed
        ManageFoodSuppliesJPanel manageFoodSuppliesJPanel = new ManageFoodSuppliesJPanel(userProcessContainer, userAccount, foodSupplierOrganization);
        userProcessContainer.add("manageFoodSuppliesJPanel", manageFoodSuppliesJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_addNewFoodItemButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewFoodItemButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
