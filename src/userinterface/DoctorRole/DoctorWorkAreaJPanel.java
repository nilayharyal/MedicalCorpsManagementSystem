package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organizations.MedicalCampOrganization;
import Business.Organizations.Organization;
import Business.RequestQueue.NewEmergencyRequestToDoctor;
import Business.UserAccount.UserAccountSoldier.UserAccountSoldier;
import Business.RequestQueue.NewRequestToDoctor;
import Business.RequestQueue.NewRequestToMedicalSupplier;
import Business.RequestQueue.WorkRequestCampCommandantDoctor;
import Business.RequestQueue.WorkRequestDoctorMedicalSupplier;
import Business.RequestQueue.WorkRequestNurseDoctor;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;

/**
 *
 * @author raunak
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccountSoldier userAccount;
    private MedicalCampOrganization medicalCamp;
    private Enterprise enterprise;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccountSoldier account, Organization organization, Enterprise enterprise, EcoSystem business) {
        try {
            initComponents();

            this.userProcessContainer = userProcessContainer;
            this.userAccount = account;
            this.business = business;
            this.medicalCamp = (MedicalCampOrganization) organization;
            this.enterprise = enterprise;

            populateCampCommanderRequestTable();
            populateMedicalSupplyRequestTable();
            populateEmergencyRequestTable();
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }

    public void populateCampCommanderRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequestCampCommandantDoctor request : medicalCamp.getRequestQueueCampCommandantDoctor().getWorkRequestCampCommandantDoctor()) {
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getSoldier().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getSoldier().getName();
            row[3] = request.getStatus();

            model.addRow(row);
        }
    }

    public void populateMedicalSupplyRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestMedicalSupplyJTable.getModel();

        model.setRowCount(0);
        for (WorkRequestDoctorMedicalSupplier request : userAccount.getRequestQueueDoctorMedicalSupplier().getWorkRequestDoctorMedicalSupplier()) {
            Object[] row = new Object[4];
            row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            String result = ((NewRequestToMedicalSupplier) request).getResult();
            row[3] = result == null ? "Waiting" : result;
            model.addRow(row);
        }
    }

    public void populateEmergencyRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestEmergenciesJTable.getModel();

        model.setRowCount(0);

        for (WorkRequestNurseDoctor request : medicalCamp.getRequestQueueNurseDoctor().getWorkRequestNurseDoctorList()) {
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getSoldier().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getSoldier().getName();
            row[3] = request.getStatus();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g)
            {
                ImageIcon img=new ImageIcon("doctor_role.jpg");
                Image i=img.getImage();

                g.drawImage(i, 0, 0, this.getSize().width, this.getSize().height,this);
            }

        };
        jPanel2 = new javax.swing.JPanel();
        processCampCommanderJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        requestMedicalSupplyJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestMedicalSupplyJTable = new javax.swing.JTable();
        refreshMedicalSupplyJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        refreshJButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        workRequestEmergenciesJTable = new javax.swing.JTable();
        assignEmergencyRequestJButton = new javax.swing.JButton();
        processEmergencyRequestJButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255,150));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        processCampCommanderJButton.setBackground(new java.awt.Color(51, 153, 255));
        processCampCommanderJButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        processCampCommanderJButton.setForeground(java.awt.Color.white);
        processCampCommanderJButton.setText("Process Camp Commander Request");
        processCampCommanderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processCampCommanderJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(processCampCommanderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 250, -1, -1));

        assignJButton.setBackground(new java.awt.Color(51, 153, 255));
        assignJButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        assignJButton.setForeground(java.awt.Color.white);
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        workRequestJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        workRequestJTable.setForeground(new java.awt.Color(51, 153, 255));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Camp Commandant", "Doctor", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setRowHeight(18);
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, 590, 110));

        refreshJButton.setBackground(new java.awt.Color(51, 153, 255));
        refreshJButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        refreshJButton.setForeground(java.awt.Color.white);
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        jLabel3.setText("CAMP COMMANDER REQUESTS IN YOUR QUEUE");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 450, 30));
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 720, 10));
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 710, 20));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 60, 740, 290));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255,150));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        requestMedicalSupplyJButton.setBackground(new java.awt.Color(51, 153, 255));
        requestMedicalSupplyJButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        requestMedicalSupplyJButton.setForeground(java.awt.Color.white);
        requestMedicalSupplyJButton.setText("Request Medical Supply");
        requestMedicalSupplyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestMedicalSupplyJButtonActionPerformed(evt);
            }
        });
        jPanel3.add(requestMedicalSupplyJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, -1, -1));

        workRequestMedicalSupplyJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        workRequestMedicalSupplyJTable.setForeground(new java.awt.Color(51, 153, 255));
        workRequestMedicalSupplyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Doctor", "Supplier", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestMedicalSupplyJTable);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 530, 100));

        refreshMedicalSupplyJButton.setBackground(new java.awt.Color(51, 153, 255));
        refreshMedicalSupplyJButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        refreshMedicalSupplyJButton.setForeground(java.awt.Color.white);
        refreshMedicalSupplyJButton.setText("Refresh");
        refreshMedicalSupplyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMedicalSupplyJButtonActionPerformed(evt);
            }
        });
        jPanel3.add(refreshMedicalSupplyJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 20, -1, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("YOUR MEDICAL SUPPLIER REQUESTS");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 340, 30));
        jPanel3.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 690, 10));
        jPanel3.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 690, 20));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, 710, 300));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255,150));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setText("EMERGENCY REQUESTS IN YOUR QUEUE");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 290, 30));

        refreshJButton1.setBackground(new java.awt.Color(51, 153, 255));
        refreshJButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        refreshJButton1.setForeground(java.awt.Color.white);
        refreshJButton1.setText("Refresh");
        refreshJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(refreshJButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 10, 80, -1));

        workRequestEmergenciesJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        workRequestEmergenciesJTable.setForeground(new java.awt.Color(51, 153, 255));
        workRequestEmergenciesJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Nurse", "Doctor", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(workRequestEmergenciesJTable);
        if (workRequestEmergenciesJTable.getColumnModel().getColumnCount() > 0) {
            workRequestEmergenciesJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestEmergenciesJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestEmergenciesJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestEmergenciesJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel4.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 530, 96));

        assignEmergencyRequestJButton.setBackground(new java.awt.Color(51, 153, 255));
        assignEmergencyRequestJButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        assignEmergencyRequestJButton.setForeground(java.awt.Color.white);
        assignEmergencyRequestJButton.setText("Assign to me");
        assignEmergencyRequestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignEmergencyRequestJButtonActionPerformed(evt);
            }
        });
        jPanel4.add(assignEmergencyRequestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, 200, -1));

        processEmergencyRequestJButton.setBackground(new java.awt.Color(51, 153, 255));
        processEmergencyRequestJButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        processEmergencyRequestJButton.setForeground(java.awt.Color.white);
        processEmergencyRequestJButton.setText("Process Emergency Request");
        processEmergencyRequestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processEmergencyRequestJButtonActionPerformed(evt);
            }
        });
        jPanel4.add(processEmergencyRequestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, 200, -1));

        jButton1.setBackground(new java.awt.Color(51, 153, 255));
        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.setForeground(java.awt.Color.white);
        jButton1.setText("Check Or Book Beds");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 70, 160, -1));
        jPanel4.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 700, 10));
        jPanel4.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 212, 690, 10));
        jPanel4.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 212, 700, 10));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 630, 740, 290));

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        try {
            int selectedRow = workRequestJTable.getSelectedRow();

            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select a row!");
                return;
            }

            WorkRequestCampCommandantDoctor request = (WorkRequestCampCommandantDoctor) workRequestJTable.getValueAt(selectedRow, 0);
            if ("Approved".equals(request.getStatus()) || "Rejected".equals(request.getStatus())) {
                JOptionPane.showMessageDialog(null, "request already processed");
            }
            {
                if ("Pending".equals(request.getStatus())) {
                    JOptionPane.showMessageDialog(null, "request already in process");
                } else {
                    request.setReceiver(userAccount);
                    request.setStatus("Pending");
                    populateCampCommanderRequestTable();
                }
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processCampCommanderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processCampCommanderJButtonActionPerformed
        try {
            int selectedRow = workRequestJTable.getSelectedRow();

            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select a row!");
                return;
            }

            NewRequestToDoctor request = (NewRequestToDoctor) workRequestJTable.getValueAt(selectedRow, 0);
            if ("Approved".equals(request.getStatus()) || "Rejected".equals(request.getStatus())) {
                JOptionPane.showMessageDialog(null, "request already processed");
            }
            {
                if (!"Pending".equals(request.getStatus()) || !userAccount.getUsername().equals(request.getReceiver().getUsername())) {
                    JOptionPane.showMessageDialog(null, " Request is not assigned to you");
                } else {
                    request.setStatus("Processing");
                    ProcessCampCommandantWorkRequestJPanel processWorkRequestJPanel = new ProcessCampCommandantWorkRequestJPanel(userProcessContainer, request);
                    userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                }
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_processCampCommanderJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateCampCommanderRequestTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void refreshMedicalSupplyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMedicalSupplyJButtonActionPerformed
        populateMedicalSupplyRequestTable();
    }//GEN-LAST:event_refreshMedicalSupplyJButtonActionPerformed

    private void requestMedicalSupplyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestMedicalSupplyJButtonActionPerformed
        try {
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("RequestToMedicalSupplierJPanel", new RequestToMedicalSupplierJPanel(userProcessContainer, userAccount, enterprise, business));
            layout.next(userProcessContainer);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_requestMedicalSupplyJButtonActionPerformed

    private void refreshJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButton1ActionPerformed
        populateEmergencyRequestTable();
    }//GEN-LAST:event_refreshJButton1ActionPerformed

    private void processEmergencyRequestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processEmergencyRequestJButtonActionPerformed
        try {
            int selectedRow = workRequestEmergenciesJTable.getSelectedRow();

            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select a row!");
                return;
            }

            NewEmergencyRequestToDoctor request = (NewEmergencyRequestToDoctor) workRequestEmergenciesJTable.getValueAt(selectedRow, 0);
            if (request.getStatus() == "Approved" || request.getStatus() == "Rejected") {
                JOptionPane.showMessageDialog(null, "request already processed");
            } else {
                request.setStatus("Processing");

                ProcessEmergencyWorkRequestJPanel processEmergencyWorkRequestJPanel = new ProcessEmergencyWorkRequestJPanel(userProcessContainer, request);
                userProcessContainer.add("processEmergencyWorkRequestJPanel", processEmergencyWorkRequestJPanel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_processEmergencyRequestJButtonActionPerformed

    private void assignEmergencyRequestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignEmergencyRequestJButtonActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRow = workRequestEmergenciesJTable.getSelectedRow();

            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select a row!");
                return;
            }

            WorkRequestNurseDoctor request = (WorkRequestNurseDoctor) workRequestEmergenciesJTable.getValueAt(selectedRow, 0);
            if (request.getStatus() == "Approved" || request.getStatus() == "Rejected") {
                JOptionPane.showMessageDialog(null, "request already processed");
            } else {
                if (request.getStatus() == "Pending") {
                    JOptionPane.showMessageDialog(null, "request already in process");
                } else {
                    request.setReceiver(userAccount);
                    request.setStatus("Pending");
                    populateEmergencyRequestTable();
                }
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_assignEmergencyRequestJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("CheckOrBookBedsPanel", new CheckOrBookBedsPanel(userProcessContainer, userAccount, medicalCamp));
            layout.next(userProcessContainer);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Null Pointer Exception Occurred!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some Exception Occurred!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignEmergencyRequestJButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JButton processCampCommanderJButton;
    private javax.swing.JButton processEmergencyRequestJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton refreshJButton1;
    private javax.swing.JButton refreshMedicalSupplyJButton;
    private javax.swing.JButton requestMedicalSupplyJButton;
    private javax.swing.JTable workRequestEmergenciesJTable;
    private javax.swing.JTable workRequestJTable;
    private javax.swing.JTable workRequestMedicalSupplyJTable;
    // End of variables declaration//GEN-END:variables
}
